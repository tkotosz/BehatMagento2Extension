<?php

namespace Tkotosz\Acceptance\Context;

use Behat\Behat\Context\Context;
use Magento\Catalog\Api\Data\ProductInterface;
use Magento\Catalog\Api\Data\ProductInterfaceFactory as ProductFactory;
use Magento\Catalog\Api\ProductRepositoryInterface;
use Magento\Customer\Api\CustomerRepositoryInterface;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Sales\Api\OrderRepositoryInterface;
use PHPUnit\Framework\Assert;

class BehatConfigurationVerificationContext implements Context
{
    /** @var OrderRepositoryInterface */
    private $orderRepository;

    public function __construct(OrderRepositoryInterface $orderRepository)
    {
        $this->orderRepository = $orderRepository;
    }

    /**
     * @Transform
     */
    public function transformStringToProduct(
        string $productSku,
        ProductRepositoryInterface $productRepository,
        ProductFactory $productFactory
    ): ProductInterface {
        Assert::assertInstanceOf(ProductRepositoryInterface::class, $productRepository);

        try {
            return $productRepository->get($productSku);
        } catch (NoSuchEntityException $e) {
            // product does not exsits - normally you would let the test fail here
            // but for this demonstration we will just create a new product in memory
            // also note that the product factory autogenerated even when it is requested from Behat
            return $productFactory->create()->setSku($productSku);
        }
    }

    /**
     * @Given A service has been successfully injected through the Context constructor
     */
    public function aServiceHasBeenSuccessfullyInjectedThroughTheContextConstructor()
    {
        // note:
        // this will always be true
        // since if the constructor injection doesn't work then Behat would fail to create the Context
        Assert::assertInstanceOf(OrderRepositoryInterface::class, $this->orderRepository);
    }

    /**
     * @Given A service has been successfully injected as argument to this step
     */
    public function aServiceHasBeenSuccessfullyInjectedAsArgumentToThisStep(CustomerRepositoryInterface $customerRepository)
    {
        // note:
        // this will always be true
        // since if the parameter injection doesn't work then Behat would fail to execute the step
        Assert::assertInstanceOf(CustomerRepositoryInterface::class, $customerRepository);
    }

    /**
     * @Given A service has been successfully injected to the parameter transformation method while transforming :product
     */
    public function aServiceHasBeenSuccessfullyInjectedToTheParameterTransformationMethodWhileTransforming(ProductInterface $product)
    {
        // note:
        // this will always be true
        // since if the parameter injection doesn't work then Behat would fail to execute the step
        Assert::assertInstanceOf(ProductInterface::class, $product);
    }

    /**
     * @When I work with Behat
     */
    public function iWorkWithBehat()
    {
        // no-op
    }

    /**
     * @Then I am happy
     */
    public function iAmHappy()
    {
        // no-op :)
    }
}
